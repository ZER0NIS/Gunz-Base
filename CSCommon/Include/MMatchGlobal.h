#ifndef _MMATCHGLOBAL_H
#define _MMATCHGLOBAL_H

#include "MBaseLocale.h"

#define MAX_CHAR_COUNT				4

#define CYCLE_STAGE_UPDATECHECKSUM	500

#define NUM_APPLYED_TEAMBONUS_TEAM_PLAYERS		3
#define RESPAWN_DELAYTIME_AFTER_DYING			7000
#define RESPAWN_DELAYTIME_AFTER_DYING_MIN		2000
#define RESPAWN_DELAYTIME_AFTER_DYING_MAX		20000

#define MAX_XP_BONUS_RATIO						2.5f
#define MAX_BP_BONUS_RATIO						2.5f

#define TRANS_STAGELIST_NODE_COUNT				8
#define TRANS_STANDBY_CLANLIST_NODE_COUNT		4

#define MAX_REPLIER	16

#define CLAN_SPONSORS_COUNT			4
#define CLAN_CREATING_NEED_BOUNTY		0
#define CLAN_CREATING_NEED_LEVEL		10

#define MAX_CHAR_LEVEL	99

#define MATCH_SIMPLE_DESC_LENGTH	64

#define ACTIONLEAGUE_TEAM_MEMBER_COUNT		4
#define MAX_LADDER_TEAM_MEMBER				4
#define MAX_CLANBATTLE_TEAM_MEMBER			16

#define CLAN_BATTLE

enum MMatchTeam
{
	MMT_ALL = 0,
	MMT_SPECTATOR = 1,
	MMT_RED = 2,
	MMT_BLUE = 3,
	MMT_END
};

enum MMatchServerMode
{
	MSM_NORMALS = 0,
	MSM_CLAN = 1,
	MSM_LADDER = 2,
	MSM_EVENT = 3,
	MSM_QUEST = 4,
	MSM_ZERONIS = 5,
	MSM_MAX,

	MSM_ALL = 100,
};

enum MMatchProposalMode
{
	MPROPOSAL_NONE = 0,
	MPROPOSAL_LADDER_INVITE,
	MPROPOSAL_CLAN_INVITE,
	MPROPOSAL_END
};

enum MLADDERTYPE
{
	MLADDERTYPE_NORMAL_1VS1 = 0,
	MLADDERTYPE_NORMAL_2VS2,
	MLADDERTYPE_NORMAL_3VS3,
	MLADDERTYPE_NORMAL_4VS4,
	MLADDERTYPE_NORMAL_5VS5,
	MLADDERTYPE_NORMAL_6VS6,
	MLADDERTYPE_NORMAL_7VS7,
	MLADDERTYPE_NORMAL_8VS8,
	MLADDERTYPE_MAX
};

const int g_nNeedLadderMemberCount[MLADDERTYPE_MAX] = { 1, 2, 3, 4, 8 };

#define DEFAULT_CLAN_POINT			1000
#define DAY_OF_DELETE_CLAN			(7)
#define MAX_WAIT_CLAN_DELETE_HOUR	(24)
#define UNDEFINE_DELETE_HOUR		(2000000000)

enum MMatchClanDeleteState
{
	MMCDS_NORMAL = 1,
	MMCDS_WAIT,
	MMCDS_DELETE,

	MMCDS_END,
};

enum MBITFLAG_USEROPTION {
	MBITFLAG_USEROPTION_REJECT_WHISPER = 1,
	MBITFLAG_USEROPTION_REJECT_INVITE = 1 << 1
};

#define MAX_QUEST_MAP_SECTOR_COUNT				16

#ifdef _DEBUG_QUEST
#define MAX_QUEST_NPC_INFO_COUNT				100
#else
#define MAX_QUEST_NPC_INFO_COUNT				14
#endif

#define ALL_PLAYER_NOT_READY					1
#define QUEST_START_FAILED_BY_SACRIFICE_SLOT	2
#define INVALID_TACKET_USER						3
#define INVALID_MAP								4

#define MIN_QUESTITEM_ID							200001
#define MAX_QUESTITEM_ID							299999

enum KMS_SCHEDULE_TYPE
{
	KMST_NO = 0,
	KMST_REPEAT,
	KMST_COUNT,
	KMST_ONCE,

	KMS_SCHEDULE_TYPE_END,
};

enum KMS_COMMAND_TYPE
{
	KMSC_NO = 0,
	KMSC_ANNOUNCE,
	KMSC_STOP_SERVER,
	KMSC_RESTART_SERVER,

	KMS_COMMAND_TYPE_END,
};

enum SERVER_STATE_KIND
{
	SSK_OPENDB = 0,

	SSK_END,
};

enum SERVER_ERR_STATE
{
	SES_NO = 0,
	SES_ERR_DB,

	SES_END,
};

enum SERVER_TYPE
{
	ST_NULL = 0,
	ST_DEBUG,
	ST_NORMAL,
	ST_CLAN,
	ST_QUEST,
	ST_EVENT,
};

enum MMatchBlockLevel
{
	MMBL_NO = 0,
	MMBL_ACCOUNT,
	MMBL_LOGONLY,

	MMBL_END,
};

inline MMatchTeam NegativeTeam(MMatchTeam nTeam)
{
	if (nTeam == MMT_RED) return MMT_BLUE;
	else if (nTeam == MMT_BLUE) return MMT_RED;
	return nTeam;
}

#define ANNOUNCE_STRING_LEN				64
#define MSG_STRING_LEN					64
#define CHAT_STRING_LEN					64
#define VOTE_DISCUSS_STRING_LEN			64
#define VOTE_ARG_STRING_LEN				64
#define STAGENAME_LENGTH				64
#define STAGEPASSWD_LENGTH				8
#define STAGE_QUEST_MAX_PLAYER			4
#define STAGE_MAX_PLAYERCOUNT			126
#define STAGE__MAX_ROUND				65534
#define CLAN_NAME_LENGTH				16
#define MIN_CLANNAME					3
#define MAX_CLANNAME					12
#define MIN_CHARNAME					3
#define MAX_CHARNAME					12
#define MATCHOBJECT_NAME_LENGTH			32
#define MAX_CHARNAME_LENGTH				24
#define MAX_CHATROOMNAME_STRING_LEN		64
#define MAX_USERID_STRING_LEN			21
#define MAX_USER_PASSWORD_STRING_LEN	20
#define USERNAME_STRING_LEN				50
#define CHANNELNAME_LEN					64
#define CHANNELRULE_LEN					64
#define MAPNAME_LENGTH		32
#define NHN_GAMEID			"u_gunz"
#define NHN_AUTH_LENGTH		4096
#define NHN_OUTBUFF_LENGTH	1024
#define MAX_ACCOUNT_ITEM			1000
#define MAX_EXPIRED_ACCOUNT_ITEM	100
#define MAX_ITEM_COUNT				100
#define MAX_QUEST_REWARD_ITEM_COUNT	500
#define MAX_SPENDABLE_ITEM_COUNT	999
#define MAX_GAMBLEITEMNAME_LEN				(65)
#define MAX_GAMBLEITEMDESC_LEN				(65)
#define MAX_BUYGAMBLEITEM_ELAPSEDTIME_MIN	(5)
#define MIN_REQUEST_STAGESTART_TIME				(1 * 1000)
#define MIN_REQUEST_SUICIDE_TIME				(1000 * 60 * 3)

#define MAX_MD5LENGH							(16)

#define MAX_SURVIVAL_SCENARIO_COUNT 3
#define MAX_SURVIVAL_RANKING_LIST 10

typedef struct _RankingInfo
{
	char szCharName[MATCHOBJECT_NAME_LENGTH];
	DWORD dwCID;
	DWORD dwRanking;
	DWORD dwRankingPoint;
} RANKINGINFO;

#define DUELTOURNAMENT_TIMESTAMP_MAX_LENGTH 8

enum MDUELTOURNAMENTTYPE
{
	MDUELTOURNAMENTTYPE_FINAL = 0,
	MDUELTOURNAMENTTYPE_SEMIFINAL,
	MDUELTOURNAMENTTYPE_QUATERFINAL,
	MDUELTOURNAMENTTYPE_MAX
};

enum MDUELTOURNAMENTROUNDSTATE {
	MDUELTOURNAMENTROUNDSTATE_FINAL = 0,
	MDUELTOURNAMENTROUNDSTATE_SEMIFINAL,
	MDUELTOURNAMENTROUNDSTATE_QUATERFINAL,
	MDUELTOURNAMENTROUNDSTATE_MAX
};

enum MDUELTOURNAMENTMATCHMAKINGFACTOR
{
	MDUELTOURNAMENTMATCHMAKINGFACTOR_TPGAP = 0,
	MDUELTOURNAMENTMATCHMAKINGFACTOR_OVERWAIT,
};

#define DUELTOURNAMENT_PRECOUNTDOWN_WINLOSE_SHOWTIME	4000
#define DUELTOURNAMENT_PRECOUNTDOWN_NEXTMATCH_SHOWTIME	6000

inline int GetDTPlayerCount(MDUELTOURNAMENTTYPE nType)
{
	switch (nType) {
	case MDUELTOURNAMENTTYPE_QUATERFINAL:		return 8;
	case MDUELTOURNAMENTTYPE_SEMIFINAL:		return 4;
	case MDUELTOURNAMENTTYPE_FINAL:			return 2;
	}

	return 0;
}

inline int GetDTRoundCount(MDUELTOURNAMENTROUNDSTATE nRoundState)
{
	switch (nRoundState) {
	case MDUELTOURNAMENTROUNDSTATE_QUATERFINAL:		return 4;
	case MDUELTOURNAMENTROUNDSTATE_SEMIFINAL:			return 2;
	case MDUELTOURNAMENTROUNDSTATE_FINAL:				return 1;
	}

	return 0;
}

typedef struct _DTRankingInfo
{
	char m_szCharName[MATCHOBJECT_NAME_LENGTH];
	int m_nTP;
	int m_nWins;
	int m_nLoses;
	int m_nRanking;
	int m_nRankingIncrease;
	int m_nFinalWins;
	int m_nGrade;
} DTRankingInfo;

typedef struct _DTPlayerInfo
{
	char m_szCharName[MATCHOBJECT_NAME_LENGTH];
	MUID uidPlayer;
	int m_nTP;
} DTPlayerInfo;

#define ACCOUNTITEM_INCREASE_LOG_MOVE			100
#define ACCOUNTITEM_INCREASE_LOG_BUY			101
#define ACCOUNTITEM_INCREASE_LOG_REWARD_BY_GM	102

#define ACCOUNTITEM_DECREASE_LOG_MOVE			200
#define ACCOUNTITEM_DECREASE_LOG_SELL			201
#define ACCOUNTITEM_DECREASE_LOG_EXPIRE			202

#define CHARITEM_INCREASE_LOG_MOVE		100
#define CHARITEM_INCREASE_LOG_BUY		101
#define CHARITEM_INCREASE_LOG_REWARD	102

#define CHARITEM_DECREASE_LOG_MOVE		200
#define CHARITEM_DECREASE_LOG_SELL		201
#define CHARITEM_DECREASE_LOG_EXPIRE	202
#define CHARITEM_DECREASE_LOG_GAMBLE	203
#define CHARITEM_DECREASE_LOG_SPEND		204

#define	MAX_CHARACTER_SHORT_BUFF_COUNT		2

typedef struct _MLongBuffInfoInDB
{
	int nCBID;
	int nBuffID;
	int nBuffSecondPeriod;
	int nStartPlayTime;
} MLongBuffInfoInDB;

typedef struct _MLongBuffInfo
{
	MUID uidBuff;

	int nCBID;
	int nBuffID;
	int nBuffPeriod;
	int nBuffPeriodRemainder;
} MLongBuffInfo;

typedef struct _MShortBuffInfo
{
	MUID uidBuff;

	int nBuffID;
	int nBuffPeriod;
	int nBuffPeriodRemainder;
} MShortBuffInfo;

#define MAX_TRAP_THROWING_LIFE		10.f

#endif